pipeline {
    agent any
    stages {
        // Etape 1 : pull du code source depuis GitHub
        stage('GIT') 
        {
            steps {
                git(
                    branch: 'khemiriOussema_4twin1_G3', 
                    url: 'https://github.com/HOUDA-18/ProjetDevops.git',
                    credentialsId: 'github-creds' // Add this line
                )
            }
        }
        // Etape 2 : test unitaire avec Maven
        stage('Tests Unitaires') 
        {
            steps {
                sh 'mvn test' 
            }
        }
        // Etape 3 : compilation du code source  
        stage('compile') 
        {
            steps {
                sh 'mvn clean compile'
            }
        }
        // Etape 4 : sonarQube
        stage('MVN SONARQUBE') 
        {
            steps {
                 withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }
        // Etape 5 : déploiement sur Nexus
        stage('Deploy to Nexus') 
        {
            steps {
                sh 'mvn deploy -Dmaven.test.skip=true'
            }
        }
        // Etape 6.1 : Construction des images Docker
        stage('Build Docker Images') 
        {
            steps {
                sh 'sudo docker compose build'
            }
        }
         // Étape 6.2 : Authentification à Docker Hub
        stage('Login to Docker Hub') 
        {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        sudo docker logout
                        echo "${DOCKER_PASSWORD}" | sudo docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }
        // Etape 7 : push image docker sur Docker Hub
        stage('Push Docker Image') 
        {
            steps {
                sh '''
                    sudo docker compose push
                    sudo docker logout
                '''
            }
        }
        // Étape 8 : Déploiement avec Docker Compose
        stage('Deploy with Docker Compose') 
        {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        // Étape 9 : Vérification du déploiement
        stage('Verify Deployment') 
        {
            steps {
                script {
                    // Réessayer jusqu'à 5 fois, avec une attente de 10 secondes entre chaque tentative
                    retry(5) {
                        sleep 10 // Attendre 10 secondes avant chaque tentative
                        sh 'curl -I http://192.168.163.128:8089/kaddem'
                    }
                }
            }
        }
   }
    // Étape 10 : Send Email
        post {
        success {
            mail to: 'oussema2khemiri5@gmail.com',
                subject: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER} Completed",
                body: """
                Build Successfully Completed!

                Job Name: ${env.JOB_NAME}
                Build Number: #${env.BUILD_NUMBER}
                Build Duration: ${currentBuild.durationString}
                
                Console Output: ${env.BUILD_URL}console
                Build Details: ${env.BUILD_URL}
                
                All tests passed and artifacts were successfully deployed.
                """
        }
        failure {
            mail to: 'oussema2khemiri5@gmail.com',
                subject: "URGENT: ${env.JOB_NAME} #${env.BUILD_NUMBER} Failed",
                body: """
                BUILD FAILURE ALERT!

                Job Name: ${env.JOB_NAME}
                Build Number: #${env.BUILD_NUMBER}
                Build Duration: ${currentBuild.durationString}
                
                Error Location: ${env.BUILD_URL}console
                Build Details: ${env.BUILD_URL}
                
                Immediate Action Required:
                1. Review console output for errors
                2. Check recent code changes
                3. Verify dependency services
                4. Re-run build after fixes
                """
        }
        }
}