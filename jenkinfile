pipeline {
    agent any

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        // ==============================================================
        # ÉTAPE DE TESTS CORRIGÉE
        // ==============================================================
        stage('Run Unit Tests') {
            steps {
                sh 'mvn clean test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/surefire-reports/**/*', allowEmptyArchive: true
                }
            }
        }

        // ==============================================================
        # ÉTAPES DE BUILD/DEPLOIEMENT
        // ==============================================================
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_8999271d243ed486224fd95df9609e4105a86ac6'
            }
        }

        stage('Build & Package') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }

        // ==============================================================
        # ÉTAPES DOCKER
        // ==============================================================
        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

        stage('Authenticate Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        docker logout
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                sh 'docker-compose push'
            }
        }

        // ==============================================================
        # DÉPLOIEMENT
        // ==============================================================
        stage('Deploy Stack') {
            steps {
                sh 'docker-compose down --remove-orphans'
                sh 'docker-compose up -d --force-recreate'
            }
        }

        stage('Health Check') {
            steps {
                retry(5) {
                    sleep 10
                    sh 'curl -sSf http://192.168.65.129:8089/kaddem/actuator/health > /dev/null'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend color: 'good', message: "Build ${env.BUILD_NUMBER} réussi ! ✅"
        }
        failure {
            slackSend color: 'danger', message: "Build ${env.BUILD_NUMBER} échoué ! ❌"
            archiveArtifacts artifacts: '**/target/logs/*.log', allowEmptyArchive: true
        }
    }
}
