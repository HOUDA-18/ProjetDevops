pipeline {
    agent any

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        // ==============================================================
        // ÉTAPE DE TESTS UNITAIRES
        // ==============================================================
        stage('Run Unit Tests') {
            steps {
                sh 'mvn clean test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/surefire-reports/**/*', allowEmptyArchive: true
                }
            }
        }

        // ==============================================================
        // ANALYSE SONARQUBE
        // ==============================================================
        stage('SonarQube Analysis') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_8999271d243ed486224fd95df9609e4105a86ac6'
            }
        }

        // ==============================================================
        // CONSTRUCTION ET DÉPLOIEMENT
        // ==============================================================
        stage('Build & Deploy') {
            steps {
                sh 'mvn clean deploy -DskipTests'
            }
        }

        // ==============================================================
        // DOCKER
        // ==============================================================
        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'DOCKER_HUB_CREDENTIALS',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                            docker logout
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
                        '''
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                sh 'docker-compose push'
            }
        }

        // ==============================================================
        // DÉPLOIEMENT FINAL
        // ==============================================================
        stage('Deploy Stack') {
            steps {
                sh 'docker-compose down --remove-orphans'
                sh 'docker-compose up -d --force-recreate'
            }
        }

        stage('Health Check') {
            steps {
                retry(5) {
                    sleep 10
                    sh 'curl -sSf http://192.168.65.129:8089/kaddem/actuator/health'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                currentBuild.description = "Build ${env.BUILD_ID}"
            }
        }
        success {
            slackSend color: 'good', message: "SUCCÈS : Build ${env.BUILD_NUMBER}"
        }
        failure {
            slackSend color: 'danger', message: "ÉCHEC : Build ${env.BUILD_NUMBER}"
            archiveArtifacts artifacts: '**/logs/*.log', allowEmptyArchive: true
        }
    }
}
