pipeline {
    agent any

    stages {
        // Étape 1 : Compilation du projet
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
// ÉTAPE AJOUTÉE (début)
        stage('Run Tests') {
            steps {
                sh 'mvn test' 
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        // ÉTAPE AJOUTÉE (fin)
        // Étape 2 : Analyse SonarQube
         stage('MVN Sonarqube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_2905618463fbe98c5cb143b9f67535672522e112 -Dmaven.test.skip=true'
            }
        }

        // Étape 3 : Installation du projet
        stage('Install') {
            steps {
                sh 'mvn clean install -Dmaven.test.skip=true'
            }
        }

        // Étape 4 : Déploiement sur Nexus
         stage('MVN Nexus') {
            steps {
                sh 'mvn deploy -Dmaven.test.skip=true'
            }
        }

        // Étape 5 : Construction des images Docker
        stage('Build Docker Images') {
            steps {
                sh 'docker compose build'
            }
        }

        // Étape 6 : Authentification à Docker Hub
         stage('Login to Docker Hub') {
            steps {
                // Nettoyer les sessions Docker existantes
                sh 'docker logout'

                // Utiliser les credentials Docker Hub
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS', // Doit correspondre à l'ID des credentials
                    usernameVariable: 'DOCKER_USER',          // Variable pour le nom d'utilisateur
                    passwordVariable: 'DOCKER_PASSWORD'       // Variable pour le token
                )]) {
                    // Authentification Docker
                    sh '''
                        echo "Tentative de connexion avec l'utilisateur: ${DOCKER_USER}"
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }

        // Étape 7 : Pousser les images Docker vers Docker Hub
        stage('Push Docker Image') {
            steps {
                sh 'docker compose push'
            }
        }

        // Étape 8 : Déploiement avec docker-compose
        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker compose up -d'
            }
        }

        // Étape 9 : Vérification du déploiement
        stage('Verify Deployment') {
            steps {
                script {
                    // Réessayer jusqu'à 5 fois, avec une attente de 10 secondes entre chaque tentative
                    retry(5) {
                        sleep 10 // Attendre 10 secondes avant chaque tentative
                        sh 'curl -I http://10.0.2.15:8089/kaddem'
                    }
                }
            }
        }

      stage('Email Notification'){
            steps {
                    post {
                    success {
                        mail to: 'wassef.ammar@esprit.tn',
                             subject: "SUCCESS: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "The job finished successfully. Check details: ${env.BUILD_URL}"
                    }
                    failure {
                        mail to: 'wassef.ammar@esprit.tn',
                             subject: "FAILURE: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                             body: "The job has failed. Check details: ${env.BUILD_URL}"
                    }
                }
                }
                }
            }
}
