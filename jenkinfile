pipeline {
    agent any

    stages {
        // ------------------------------------------------------------------
        // NOUVELLE ÉTAPE AJOUTÉE (tests unitaires)
        // ------------------------------------------------------------------
        stage('Run Unit Tests') {
            steps {
                sh 'mvn test' 
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        // ------------------------------------------------------------------
        // ÉTAPES EXISTANTES (inchangées)
        // ------------------------------------------------------------------
        // Étape 1 : Compilation du projet
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Étape 2 : Analyse SonarQube
        stage('MVN Sonarqube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=squ_8999271d243ed486224fd95df9609e4105a86ac6 -Dmaven.test.skip=true'
            }
        }

        // Étape 3 : Installation du projet
        stage('Install') {
            steps {
                sh 'mvn clean install -Dmaven.test.skip=true'
            }
        }

        // Étape 4 : Déploiement sur Nexus
        stage('MVN Nexus') {
            steps {
                sh 'mvn deploy -Dmaven.test.skip=true'
            }
        }

        // Étape 5 : Construction des images Docker
        stage('Build Docker Images') {
            steps {
                sh 'docker-compose build'
            }
        }

        // Étape 6 : Authentification à Docker Hub
        stage('Login to Docker Hub') {
            steps {
                sh 'docker logout'
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        echo "Tentative de connexion avec l'utilisateur: ${DOCKER_USER}"
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }

        // Étape 7 : Pousser les images Docker vers Docker Hub
        stage('Push Docker Image') {
            steps {
                sh 'docker-compose push'
            }
        }

        // Étape 8 : Déploiement avec docker-compose
        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        // Étape 9 : Vérification du déploiement
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -I http://192.168.65.129:8089/kaddem'
                    }
                }
            }
        }
    }

    // ------------------------------------------------------------------
    // SECTION POST INCHANGÉE
    // ------------------------------------------------------------------
    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
